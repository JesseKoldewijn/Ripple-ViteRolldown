import { track, effect, TrackedSet } from "ripple";
import { useAtom } from "jotai-ripple";

import { Counter } from "./components/counter.ripple";
import { Button } from "./components/button.ripple";
import { Sun } from "./components/icons/sun.ripple";
import { Moon } from "./components/icons/moon.ripple";

import { appStateAtom } from "./store/root";
import type { AppProps } from "./app.types";
import { getInitialTheme } from "./logic/theme";

const initialCounters = [0, 5, 10];

export component App() {
	const [ appStore, setAppStore ] = useAtom(appStateAtom);

	effect(() => {
		themeLoader(theme => {
			setAppStore({
				...appStore,
				theme,
			});
		});
	});

	let theme = track(@appStore.theme);
	const counters = new TrackedSet(initialCounters);

	function themeLoader(themeSet: Function) {
		const _theme = getInitialTheme();

		document.documentElement.classList.remove("light", "dark");
		document.documentElement.classList.add(_theme);

		if (themeSet) {
			themeSet(_theme);
		}
		@theme = _theme;
	}

	<header class="fixed flex gap-2 items-center justify-evenly w-full p-4 text-center md:text-xl font-bold bg-background">
		<span class="text-start w-full">{"Ripple"}</span>
		<span class="text-center w-full">{`Theme: ${@theme}`}</span>
		<div class="text-center w-full flex justify-end"><button class="text-center px-2 py-1 h-10 w-10 flex items-center-justify-center border rounded cursor-pointer" onclick={() => {
				@theme = @appStore.theme === "light" ? "dark" : "light";

				setAppStore({
					...appStore,
					theme: @theme,
				});

				document.documentElement.classList.remove("light", "dark");
				document.documentElement.classList.add(@theme);
				localStorage.setItem("theme", @theme);
			}}>if (@theme === "light") {
			<Sun class="inline" width="24" />
		} else {
			<Moon class="inline" width="24" />
		}</button></div>
	</header>

	<div class="flex flex-col gap-4 p-4 pt-20">for (const count of counters) {
		<Counter initialCount={count} />
	}</div>

	<footer class="fixed bottom-0 w-full p-4 text-center bg-background"><div class="flex justify-center flex-row gap-2">
		<Button class="w-full h-12" disabled={counters.size <= 1} onClick={() => {
				const lastCounter = Math.max(...counters);
				counters.delete(lastCounter);
			}} text="Remove Counter" />
		<Button class="w-full h-12" onClick={() => {
				const newCount = counters.size > 0 ? Math.max(...counters) + 5 : 0;
				counters.add(newCount);
			}} text="Add Counter" />
	</div></footer>
}